import telebot
import sqlite3
from telebot import types
import json
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

token = '5402432597:AAF4ZX3fIFxHIP_XvQ1R6nK8byLQaRccN64'
ootzivi = ["–ï–ª–µ–Ω–∞ –®" + "\n" + "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠ê 16.01.2020 Ô∏è"+"\n"+"–í–∫—É—Å–Ω–æ –∏ –¥–æ—Å—Ç–æ–π–Ω–æ. –ß–∏—Å—Ç–æ, –≥–ª–∞–≤–Ω–æ–µ. –•–æ—Ä–æ—à–µ–µ –º–µ–Ω—é. –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω–æ–µ, —á—Ç–æ —É–¥–∏–≤–∏–ª–æ, —ç—Ç–æ —Ç–æ, —á—Ç–æ –Ω–µ–ª—å–∑—è –≤–∑—è—Ç—å –ª–∞–Ω—á –∏ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º —á–µ–ª–æ–≤–µ–∫–æ–º –∏–º. –ö–∞–∫–∞—è —Ä–∞–∑–Ω–∏—Ü–∞, –¥–µ–Ω—å–≥–∏-—Ç–æ –ø–ª–∞—Ç–∏–º",
           "–ù–∞—Ç–∞–ª—å—è –†" + "\n" + "‚≠êÔ∏è‚≠ê‚≠êÔ∏è‚≠êÔ∏è‚≠ê 13.05.2022 Ô∏è"+"\n"+'–ù–µ–¥–∞–≤–Ω–æ –º–Ω–µ –¥–æ–≤–µ–ª–æ—Å—å –ø–æ—Å–µ—Ç–∏—Ç—å –≤ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ–¥—Ä—É–≥ —Å–µ—Ç—å –∫–æ—Ñ–µ–µ–Ω "–®–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–∞", –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∞ –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö –Ω–∞—à–µ–π —Å—Ç—Ä–∞–Ω—ã. –Ø –ø–æ–±—ã–≤–∞–ª–∞ —Ç–∞–º –≤–ø–µ—Ä–≤—ã–µ, –æ–¥–Ω–∞–∫–æ –º–æ–∏ –ø–æ–¥—Ä—É–≥–∏ - –∑–∞–≤—Å–µ–≥–¥–∞—Ç–∞–∏, –ø–æ—Å–∫–æ–ª—å–∫—É —Ä–∞–±–æ—Ç–∞—é—Ç —Ä—è–¥–æ–º –∏ —Ö–æ–¥—è—Ç —Å—é–¥–∞ –Ω–∞ –±–∏–∑–Ω–µ—Å-–ª–∞–Ω—á. –û—Ç–∑—ã–≤—ã —É –Ω–∏—Ö –æ –∫–æ—Ñ–µ–π–Ω–µ –±—ã–ª–∏ —Ö–æ—Ä–æ—à–∏–µ. –ò –º–æ–µ –º–Ω–µ–Ω–∏–µ –æ "–®–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–µ" —Ç–æ–∂–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º.',
           "–ù–∏–∫–æ–ª–∞–π –ú" + "\n" + "‚≠êÔ∏èÔ∏è‚≠êÔ∏è‚≠ê‚≠ê‚≠ê 21.03.2022 Ô∏è"+"\n"+"–ö–æ–≥–¥–∞ –º—ã –µ–¥–µ–º –≤ –æ—Ç–ø—É—Å–∫, –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–µ–∑–∂–∞–µ–º —á–µ—Ä–µ–∑ –ú–æ—Å–∫–≤—É. –ò –≤—Å–µ–≥–¥–∞ –ø–æ—Å–µ—â–∞–µ–º –∫–æ—Ñ–µ–π–Ω—é '–®–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–∞'. –í –Ω–µ–π –æ—á–µ–Ω—å –≤–∫—É—Å–Ω–æ –≥–æ—Ç–æ–≤—è—Ç –∏ –≥–æ—Ä—è—á–µ–µ, –∏ –¥–µ—Å–µ—Ä—Ç—ã —Å –ø–∏—Ä–æ–∂–Ω—ã–º–∏. –ß–∞—â–µ –≤—Å–µ–≥–æ –º—ã –∫—É—à–∞–µ–º —Ç–∞–º —Å–ª–∞–¥–µ–Ω—å–∫–æ–µ –∏ –ø—å–µ–º –∫–æ—Ñ–µ.",
           "–ò–≤–∞–Ω –ù" + "\n" + "‚≠êÔ∏è‚≠êÔ∏è‚≠êÔ∏è‚≠ê 24.12.2021 Ô∏è"+"\n"+"–†–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –ø–æ—Å–µ—â–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–∞—Ñ–µ –æ–∫–∞–∑–∞–ª–∏—Å—å –¥–æ–≤–æ–ª—å–Ω—ã –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ, —Ü–µ–Ω—ã –≤ –®–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–µ –Ω–µ —Å–∞–º—ã–µ –≤—ã—Å–æ–∫–∏–µ, –ø—Ä–∏—à–ª–æ—Å—å –æ—Ç–¥–∞—Ç—å —á–∞–µ–≤—ã–µ –∑–∞ —Ö–æ—Ä–æ—à–∏–π —Å–µ—Ä–≤–∏—Å.–° —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –ø–æ—Å–µ—â—É –®–æ–∫–æ–ª–∞–¥–Ω–∏—Ü—É –≤ –Ω–∞—à–µ–º –≥–æ—Ä–æ–¥–µ, –∞ –≤ –ø–∏—Ç–µ—Ä—Å–∫–æ–º —Ñ–∏–ª–∏–∞–ª–µ –æ—á–µ–Ω—å —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –ø–æ—Å–∏–¥–µ—Ç—å –æ—Ç–¥–æ—Ö–Ω—É—Ç—å —Å —á–∞—à–∫–æ–π –≥–æ—Ä—è—á–µ–≥–æ –∫–æ—Ñ–µ.–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –≤–Ω–∏–º–∞–Ω–∏–µ –∏ –∂–µ–ª–∞—é –æ—Ç–ª–∏—á–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!",
           "–ò—Ä–∏–Ω–∞ –ö" + "\n" + "‚≠êÔ∏è‚≠êÔ∏è‚≠ê‚≠êÔ∏è‚≠ê 17.07.2022"+"\n"+ "–í '–®–æ–∫–æ–ª–∞–¥–Ω–∏—Ü–µ' –≤—Å–µ–≥–¥–∞ –µ—Å—Ç—å –∞–≤—Ç–æ—Ä—Å–∫–∏–µ –Ω–∞–ø–∏—Ç–∫–∏, –∏ –¥–æ–≤–æ–ª—å–Ω–æ —Ä–µ–¥–∫–∏–µ –≤–∏–¥—ã —á–∞—è –∏ –∫–æ—Ñ–µ, —á—Ç–æ –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è. –í—á–µ—Ä–∞ —è —Ç–∞–º –ø–æ–µ–ª–∞ –Ω–∞ 850 —Ä—É–±–ª–µ–π, –Ω–æ —è —Å—á–∏—Ç–∞—é, —á—Ç–æ —ç—Ç–æ –¥–∞–∂–µ –Ω–µ –æ—Å–æ–±–æ –¥–æ—Ä–æ–≥–æ, –ø–æ—Ç–æ–º—É —á—Ç–æ –∫–∞—á–µ—Å—Ç–≤–æ –ø–∏—â–∏, –∫–æ—Ç–æ—Ä—É—é —Ç–∞–º –≥–æ—Ç–æ–≤—è—Ç - –Ω–∞ –≤—ã—Å—à–µ–º —É—Ä–æ–≤–Ω–µ, –∏ —Ç–∞–º –≤—Å–µ–≥–¥–∞ –≤–∫—É—Å–Ω–æ."]

info = ["","","",""]
bot = telebot.TeleBot(token)

@bot.message_handler(commands = ['add'])
def add(message):
    connect = sqlite3.connect('uusery.db')
    cursor = connect.cursor()

    people_id = message.chat.id
    cursor.execute("""CREATE TABLE IF NOT EXISTS login_id(id INTEGER)""")
    connect.commit()

    people_id = message.chat.id
    cursor.execute(f"SELECT id FROM login_id WHERE id = {people_id}")
    data = cursor.fetchone()
    if data is None:
        user_id = [message.chat.id]
        cursor.execute("INSERT INTO login_id VALUES(?);", (user_id))
        connect.commit()
        bot.send_message(message.chat.id, "–í–±–∏–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!")
    else:
        bot.send_message(message.chat.id, "–¢–∞–∫–æ–µ ID —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!!")








@bot.message_handler(commands = ['delete'])
def delete(message):
    connect = sqlite3.connect('uusery.db')
    cursor = connect.cursor()

    people_id = message.chat.id
    cursor.execute(f"DELETE FROM login_id WHERE id = {people_id}")
    connect.commit()
    bot.send_message(message.chat.id, "–≠—Ç–æ ID —É–¥–∞–ª–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")



# @bot.message_handler(commands = ['delete'])
# def remove(message):
#     connect = sqlite3.connect('uusery.db')
#     cursor = connect.cursor()

#     people_id = message.chat.id
#     cursor.execute(f"DELETE FROM choco WHERE id = {people_id}")
#     connect.commit()
#     bot.send_message(message.chat.id, "–ë—Ä–æ–Ω—å —Å —ç—Ç–æ–≥–æ ID —É–¥–∞–ª–∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö!")


@bot.message_handler(commands = ['start'])
def start(message):


    bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç—É–π—Ç–µ,  " + message.from_user.first_name + '!' +' üç∞')
    all = types.InlineKeyboardMarkup(row_width=1)
    site = types.InlineKeyboardButton("–û—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π —Å–∞–π—Ç", url = "https://shoko.ru/")
    menu = types.InlineKeyboardButton("–ú–µ–Ω—é", url = "https://shoko.ru/menu/")
    all.add(site, menu)

    rmk = types.ReplyKeyboardMarkup(resize_keyboard= True)
    rmk.add(types.KeyboardButton('–ï—â–µ'))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –í–∞—Å –≤–æ–ø—Ä–æ—Å:", reply_markup=all)
    msg = bot.send_message(message.chat.id, "–ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –í–∞—Å –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ –æ–∫–∞–∑–∞–ª–æ—Å—å –≤ —Å–ø–∏—Å–∫–µ, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ï–©–ï", reply_markup=rmk)
    bot.register_next_step_handler(msg, new_new)

def new_new(message):
    rock = types.ReplyKeyboardMarkup(resize_keyboard= True, row_width=2)
    rock.add(types.KeyboardButton("–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω"),types.KeyboardButton("–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫"), types.KeyboardButton("–û—Ç–∑—ã–≤—ã"),types.KeyboardButton("–í—Å–µ –∞–¥—Ä–µ—Å–∞"))

    mess = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –≤–æ–ø—Ä–æ—Å", reply_markup=rock)
    bot.register_next_step_handler(mess, aaaa)

def aaaa(message):
    if message.text == "–í–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω":
        dada = bot.send_message(message.chat.id, "+7 915 107-39-80")
        ret = types.ReplyKeyboardMarkup(resize_keyboard= True)
        ret.add(types.KeyboardButton("–ï—â–µ"))
        bot.send_message(message.chat.id, "–ï—Å–ª–∏ –æ—Å—Ç–∞–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –ï–©–ï", reply_markup=ret)
        bot.register_next_step_handler(dada, new_new)
    elif message.text == "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–æ–ª–∏–∫":
        time = types.ReplyKeyboardMarkup(resize_keyboard= True, row_width=2)
        time.add(types.KeyboardButton("10:00"),types.KeyboardButton("11:00"),types.KeyboardButton("12:00"),types.KeyboardButton("13:00"),types.KeyboardButton("14:00"),types.KeyboardButton("15:00"),types.KeyboardButton("16:00"),types.KeyboardButton("17:00"),types.KeyboardButton("18:00"), types.KeyboardButton("19:00"), types.KeyboardButton("20:00"))

        ass = bot.send_message(message.chat.id, "‚è∞" + "\n"+ "–í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è", reply_markup=time)
        bot.register_next_step_handler(ass, asd)
    elif message.text ==  "–û—Ç–∑—ã–≤—ã":
        yoy= types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        yoy.add(types.KeyboardButton("–ë–∞–ª–¥–µ–∂!"))
        count = 5
        page = 1
        markup = InlineKeyboardMarkup()
        markup.add(InlineKeyboardButton(text=f'{page}/{count}', callback_data=' '),
                   InlineKeyboardButton(text='>', callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(page+1) + ",\"CountPage\":" + str(count) + "}"))

        oy= types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        oy.add(types.KeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é"))
        iu = bot.send_message(message.from_user.id, "–û—Ç–∑—ã–≤—ã", reply_markup = oy)
        bot.send_message(message.chat.id,ootzivi[page-1], reply_markup = markup)
        bot.register_next_step_handler(iu,new_new)

    elif message.text== "–í—Å–µ –∞–¥—Ä–µ—Å–∞":
        ups=types.ReplyKeyboardMurkup(resize_keyboard=True, row_width=2)
        ups.add(types.KeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é"))
        ay=bot.send_message(message.chat.id,"–¥–æ–¥–µ–ª–∞—Ç—å",reply_markup=ups)
        bot.register_next_step_handler(ay,ups)

        # bot.register_next_step_handler(qwerty,new_new)
@bot.callback_query_handler(func=lambda call:True)
def callback_query(call):
    req = call.data.split('_')
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ - —Å–∫—Ä—ã—Ç—å
    # if req[0] == 'unseen':
    #     bot.delete_message(call.message.chat.id, call.message.message_id)
    #–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ - –≤–ø–µ—Ä–µ–¥ –∏ –Ω–∞–∑–∞–¥
    if 'pagination' in req[0]:
    #–†–∞—Å—Å–ø–∞—Ä—Å–∏–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π JSON
        json_string = json.loads(req[0])
        count = json_string['CountPage']
        page = json_string['NumberPage']
            #–ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º markup
        markup = InlineKeyboardMarkup()
        # markup.add(InlineKeyboardButton(ootzivi[page-1], callback_data='unseen'))
        #markup –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        if page == 1:
            markup.add(InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                       InlineKeyboardButton(text=f'>',
                                            callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                page + 1) + ",\"CountPage\":" + str(count) + "}"))
        #markup –¥–ª—è –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        elif page == count:
            markup.add(InlineKeyboardButton(text=f'<',
                                            callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(
                                                page - 1) + ",\"CountPage\":" + str(count) + "}"),
                       InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '))
        #markup –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
        else:
            markup.add(InlineKeyboardButton(text=f'<', callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(page-1) + ",\"CountPage\":" + str(count) + "}"),
                           InlineKeyboardButton(text=f'{page}/{count}', callback_data=f' '),
                           InlineKeyboardButton(text=f'>', callback_data="{\"method\":\"pagination\",\"NumberPage\":" + str(page+1) + ",\"CountPage\":" + str(count) + "}"))
        bot.edit_message_text(ootzivi[page-1],#f'–û—Ç–∑—ã–≤ {page} –∏–∑ {count}',
                              reply_markup = markup, chat_id=call.message.chat.id, message_id=call.message.message_id)


def asd(message):
    timeses = str(message.text)
    info[0]=timeses
    chels = types.ReplyKeyboardMarkup(resize_keyboard= True, row_width=2)
    chels.add(types.KeyboardButton('1-2'), types.KeyboardButton('3-5'), types.KeyboardButton('6-8'))

    soob = bot.send_message(message.chat.id, "üë™" + "\n"+ "–í—ã–±–µ—Ä–µ—Ç–µ –∫–æ–ª-–≤–æ –ø–µ—Ä—Å–æ–Ω", reply_markup=chels)
    bot.register_next_step_handler(soob, fit)
def fit(message):
    helihs = str(message.text)
    info[1] = helihs
    but = bot.send_message(message.chat.id, "‚òéÔ∏è"  "\n"+ "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –∫–∞–∫–∏—Ö –ª–∏–±–æ –∑–Ω–∞–∫–æ–≤")
    bot.register_next_step_handler(but, number)
def number(message):
    for i in message.text:
        if (str(message.text)[0] == '8' and len(str(message.text)) == 11) or (str(message.text)[0] == '+' and str(message.text)[1] == '7' and len(str(message.text)) == 12):
            numbere = str(message.text)
            info[2]=numbere
            hood = bot.send_message(message.chat.id, "üëª" "\n"+ "–ù–∞–ø–∏—à–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é —á–µ–ª–æ–≤–µ–∫–∞, –Ω–∞ —á—å–µ –∏–º—è –±—É–¥–µ—Ç –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞ –±—Ä–æ–Ω—å")
            bot.register_next_step_handler(hood, bue)
            break
    else:
        asa = bot.send_message(message.chat.id, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
        bot.register_next_step_handler(asa, number)

def bue(message):
    name = str(message.text)
    info[3]=name
    knopka = types.ReplyKeyboardMarkup(resize_keyboard= True, row_width=2)
    knopka.add(types.KeyboardButton('–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å üëé'), types.KeyboardButton('–í—Å–µ –≤–µ—Ä–Ω–æ üëç'))
    what = bot.send_message(message.chat.id, "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –±—Ä–æ–Ω–∏:" + "\n"+"–°—Ç–æ–ª–∏–∫ –Ω–∞ " + str(info[0]) + ' –Ω–∞ '+ str(info[1])+ " –ø–µ—Ä—Å–æ–Ω " + "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω –Ω–∞ –Ω–æ–º–µ—Ä " + str(info[2]) + " –Ω–∞ –∏–º—è " + str(info[3]),reply_markup=knopka)
    bot.register_next_step_handler(what, suuubd)

def suuubd(message):
    if message.text == "–•–æ—á—É –∏—Å–ø—Ä–∞–≤–∏—Ç—å üëé":
        time = types.ReplyKeyboardMarkup(resize_keyboard= True, row_width=2)
        time.add(types.KeyboardButton("12:00"), types.KeyboardButton("13:00"), types.KeyboardButton("14:00"), types.KeyboardButton("15:00"), types.KeyboardButton("16:00"),
                 types.KeyboardButton("17:00"), types.KeyboardButton("18:00"), types.KeyboardButton("19:00"), types.KeyboardButton("20:00"))
        ass = bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–µ—Ç–µ –≤—Ä–µ–º—è", reply_markup=time)
        bot.register_next_step_handler(ass, asd)
    else:
        fine = types.ReplyKeyboardMarkup(resize_keyboard= True, row_width=2)
        fine.add(types.KeyboardButton("–û—Ç–ª–∏—á–Ω–æ!"))

        azaza = bot.send_message(message.chat.id, "–ë—Ä–æ–Ω—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!", reply_markup = fine)
        bot.register_next_step_handler(azaza, woow)


def woow(message):
    if str(message.chat.id)=="1351828821":
        bot.send_message(message.chat.id, "–°–µ—Ä–∂—É –≤—Ö–æ–¥ –∑–∞–ø—Ä–µ—â–µ–Ω!")
    else:
        connect = sqlite3.connect("uusery.db")
        cursor = connect.cursor()

        cursor.execute("""CREATE TABLE IF NOT EXISTS choco(
            id INTEGER,
            name VARCHAR,
            time VARCHAR,
            count VARCHAR,
            phone VARCHAR
        )""")

        connect.commit()

        people_id = message.chat.id
        cursor.execute(f"SELECT id FROM choco WHERE id = {people_id}")
        data = cursor.fetchone()
        if data == None:
            user_id = [message.chat.id]
            sql = "INSERT INTO choco (id, name, time, count, phone) VALUES (?, ?, ?, ?, ?)"
            val = (str(user_id), info[3],info[0], info[1], info[2])
            cursor.execute(sql, val)
            connect.commit()
            oy= types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
            oy.add(types.KeyboardButton("–ó–∞–º–µ—á—Ç–∞—Ç–µ–ª—å–Ω–æ!"))
            lol =bot.send_message(message.chat.id, "–í–±–∏–ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!", reply_markup=oy)
            bot.register_next_step_handler(lol,new_new)
        else:
            bot.send_message(message.chat.id, "–ù–∞ —ç—Ç–æ –∏–º—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –±—Ä–æ–Ω—å!")




# timestamp not null default current_timestamp
# delete from choco where added_at < now()-interval 15 second


# import sqlite3
# db = sqlite3.connect('uusery.db')
# sql = db.cursor()

# sql.execute("""CREATE TABLE IF NOT EXISTS users(
#     name TEXT,
#     phone TEXT,
#     time TEXT,
#     count TEXT
# )""")
# named = str(info[3])
# phoned = str(info[2])
# timed = str(info[0])
# countd = str(info[1])
# db.commit()
# def prove(message):

#     sql = db.cursor()

#     sql.execute(f"INSERT INTO users VALUES (?, ?, ?, ?)", (named, phoned, timed, countd))
#     db.commit()
#     bot.send_message(message.chat.id, "–ó–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ!")
#     info.clear()

# @bot.message_handler(commands = ['wow'])
# def wow(message):
#     for value in sql.execute("SELECT * FROM users"):
#         bot.send_message(chat.message.id, value)








# # @bot.message_handler()
# # def af(message):
# #     if message.text == "Photo":
# #         photo = open("i (1).jpg", 'rb')
# #         bot.send_photo(message.chat.id, photo)
# # @bot.message_handler(content_types=['photo'])
# # def dds(message):
# #     bot.send_message(message.chat.id, "–ö–ª–∞—Å—Å–Ω–æ–µ —Ñ–æ—Ç–æ!")

bot.polling(none_stop = True)
